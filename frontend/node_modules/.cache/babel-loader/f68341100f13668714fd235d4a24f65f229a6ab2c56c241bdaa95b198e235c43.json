{"ast":null,"code":"import axios from 'axios';\n// Configuración base de axios\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Interceptor para agregar token de autenticación\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Interceptor para manejar errores de autenticación\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('access_token');\n    window.location.href = '/login';\n  }\n  return Promise.reject(error);\n});\n\n// Servicios de autenticación\nexport const authService = {\n  login: async credentials => {\n    const response = await api.post('/auth/login-json', credentials);\n    return response.data;\n  },\n  logout: () => {\n    localStorage.removeItem('access_token');\n  },\n  isAuthenticated: () => {\n    return !!localStorage.getItem('access_token');\n  },\n  setToken: token => {\n    localStorage.setItem('access_token', token);\n  }\n};\n\n// Servicios de administración (Solo Superusuario)\nexport const adminService = {\n  getCarreras: async () => {\n    const response = await api.get('/admin/carreras');\n    return response.data;\n  },\n  createCarrera: async carrera => {\n    const response = await api.post('/admin/carreras', carrera);\n    return response.data;\n  },\n  createUsuario: async usuario => {\n    const response = await api.post('/admin/users', usuario);\n    return response.data;\n  }\n};\n\n// Servicios de gestión de horarios\nexport const scheduleService = {\n  getProfesoresByCarrera: async carreraId => {\n    const response = await api.get(`/schedule/profesores/${carreraId}`);\n    return response.data;\n  },\n  updateProfesorAvailability: async (profesorId, data) => {\n    const response = await api.put(`/schedule/profesor/${profesorId}/availability`, data);\n    return response.data;\n  },\n  generateSchedule: async request => {\n    const response = await api.post('/schedule/generate', request);\n    return response.data;\n  },\n  getGrupoSchedule: async (grupoId, version = 1) => {\n    const response = await api.get(`/schedule/grupo/${grupoId}/horario`, {\n      params: {\n        version\n      }\n    });\n    return response.data;\n  },\n  importProfesores: async (carreraId, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post(`/schedule/import/profesores/${carreraId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  },\n  importMaterias: async (carreraId, file) => {\n    const formData = new FormData();\n    formData.append('file', file);\n    const response = await api.post(`/schedule/import/materias/${carreraId}`, formData, {\n      headers: {\n        'Content-Type': 'multipart/form-data'\n      }\n    });\n    return response.data;\n  }\n};\n\n// Servicios de registro y perfil\nexport const registrationService = {\n  registerJefeCarrera: async (userData, carreraId) => {\n    const response = await api.post(`/register/jefe-carrera`, userData, {\n      params: {\n        id_carrera: carreraId\n      }\n    });\n    return response.data;\n  },\n  getCarrerasDisponibles: async () => {\n    const response = await api.get('/register/carreras-disponibles');\n    return response.data;\n  },\n  changePassword: async (currentPassword, newPassword) => {\n    const response = await api.post('/register/change-password', {\n      current_password: currentPassword,\n      new_password: newPassword\n    });\n    return response.data;\n  },\n  getUserProfile: async () => {\n    const response = await api.get('/register/profile');\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","status","removeItem","window","location","href","Promise","reject","authService","login","credentials","post","data","logout","isAuthenticated","setToken","setItem","adminService","getCarreras","get","createCarrera","carrera","createUsuario","usuario","scheduleService","getProfesoresByCarrera","carreraId","updateProfesorAvailability","profesorId","put","generateSchedule","getGrupoSchedule","grupoId","version","params","importProfesores","file","formData","FormData","append","importMaterias","registrationService","registerJefeCarrera","userData","id_carrera","getCarrerasDisponibles","changePassword","currentPassword","newPassword","current_password","new_password","getUserProfile"],"sources":["C:/Users/pakog/Documents/Horarios/frontend/src/services/api.ts"],"sourcesContent":["import axios, { AxiosResponse } from 'axios';\r\nimport { \r\n  Usuario, \r\n  AuthResponse, \r\n  LoginForm, \r\n  Carrera, \r\n  CreateCarreraForm,\r\n  CreateUsuarioForm,\r\n  Profesor,\r\n  HorarioGenerado,\r\n  ScheduleGenerationRequest,\r\n  ScheduleGenerationResponse,\r\n  UpdateAvailabilityForm\r\n} from '../types';\r\n\r\n// Configuración base de axios\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n});\r\n\r\n// Interceptor para agregar token de autenticación\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('access_token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Interceptor para manejar errores de autenticación\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('access_token');\r\n      window.location.href = '/login';\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Servicios de autenticación\r\nexport const authService = {\r\n  login: async (credentials: LoginForm): Promise<AuthResponse> => {\r\n    const response: AxiosResponse<AuthResponse> = await api.post('/auth/login-json', credentials);\r\n    return response.data;\r\n  },\r\n\r\n  logout: () => {\r\n    localStorage.removeItem('access_token');\r\n  },\r\n\r\n  isAuthenticated: (): boolean => {\r\n    return !!localStorage.getItem('access_token');\r\n  },\r\n\r\n  setToken: (token: string) => {\r\n    localStorage.setItem('access_token', token);\r\n  }\r\n};\r\n\r\n// Servicios de administración (Solo Superusuario)\r\nexport const adminService = {\r\n  getCarreras: async (): Promise<Carrera[]> => {\r\n    const response: AxiosResponse<Carrera[]> = await api.get('/admin/carreras');\r\n    return response.data;\r\n  },\r\n\r\n  createCarrera: async (carrera: CreateCarreraForm): Promise<Carrera> => {\r\n    const response: AxiosResponse<Carrera> = await api.post('/admin/carreras', carrera);\r\n    return response.data;\r\n  },\r\n\r\n  createUsuario: async (usuario: CreateUsuarioForm): Promise<Usuario> => {\r\n    const response: AxiosResponse<Usuario> = await api.post('/admin/users', usuario);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Servicios de gestión de horarios\r\nexport const scheduleService = {\r\n  getProfesoresByCarrera: async (carreraId: number): Promise<Profesor[]> => {\r\n    const response: AxiosResponse<Profesor[]> = await api.get(`/schedule/profesores/${carreraId}`);\r\n    return response.data;\r\n  },\r\n\r\n  updateProfesorAvailability: async (profesorId: number, data: UpdateAvailabilityForm): Promise<Profesor> => {\r\n    const response: AxiosResponse<Profesor> = await api.put(`/schedule/profesor/${profesorId}/availability`, data);\r\n    return response.data;\r\n  },\r\n\r\n  generateSchedule: async (request: ScheduleGenerationRequest): Promise<ScheduleGenerationResponse> => {\r\n    const response: AxiosResponse<ScheduleGenerationResponse> = await api.post('/schedule/generate', request);\r\n    return response.data;\r\n  },\r\n\r\n  getGrupoSchedule: async (grupoId: number, version: number = 1): Promise<HorarioGenerado[]> => {\r\n    const response: AxiosResponse<HorarioGenerado[]> = await api.get(`/schedule/grupo/${grupoId}/horario`, {\r\n      params: { version }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  importProfesores: async (carreraId: number, file: File): Promise<any> => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const response = await api.post(`/schedule/import/profesores/${carreraId}`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  importMaterias: async (carreraId: number, file: File): Promise<any> => {\r\n    const formData = new FormData();\r\n    formData.append('file', file);\r\n    const response = await api.post(`/schedule/import/materias/${carreraId}`, formData, {\r\n      headers: {\r\n        'Content-Type': 'multipart/form-data',\r\n      },\r\n    });\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Servicios de registro y perfil\r\nexport const registrationService = {\r\n  registerJefeCarrera: async (userData: CreateUsuarioForm, carreraId: number): Promise<Usuario> => {\r\n    const response: AxiosResponse<Usuario> = await api.post(`/register/jefe-carrera`, userData, {\r\n      params: { id_carrera: carreraId }\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getCarrerasDisponibles: async (): Promise<Carrera[]> => {\r\n    const response: AxiosResponse<Carrera[]> = await api.get('/register/carreras-disponibles');\r\n    return response.data;\r\n  },\r\n\r\n  changePassword: async (currentPassword: string, newPassword: string): Promise<any> => {\r\n    const response = await api.post('/register/change-password', {\r\n      current_password: currentPassword,\r\n      new_password: newPassword\r\n    });\r\n    return response.data;\r\n  },\r\n\r\n  getUserProfile: async (): Promise<Usuario> => {\r\n    const response: AxiosResponse<Usuario> = await api.get('/register/profile');\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}